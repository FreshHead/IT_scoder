ИТ шкодер


Задание 1.

Спросить у пользователя число n.
Напечатать числа от 1 до n. Через пробел.


Задание 2.

Спросить у пользователя число n.
Напечатать числа от 1 до n. По 8 штук в строке.


Задание 3.

Спросить у пользователя число n.
Напечатать числа от 1 до n. В первой строке - 1 число, во второй - 2 числа, в третьей - 3 и т.д.


Задание 4. Посчитать факториал.

Спросить у пользователя число n.
Напечатать n! (факториал числа n).

PS: факториал - произведение всех чисел от 1 до n.
В данной задаче факториал считать циклом:
1 = 1
2 * 1 = 2
3 * 2 = 6
4 * 6 = 24
5 * 24 = 120
6 * 120 = 720


Задание 5. Посчитать факториал. Рекурсивно.

Спросить у пользователя число n.
Напечатать n! (факториал числа n).

PS: факториал - произведение всех чисел от 1 до n.
В данной задаче факториал считать рекурсией:
например, как посчитать 7! :
7! = 1*2*3*4*5*6 * 7
но
6! = 1*2*3*4*5*6
значит,
7! = 6! * 7
то есть, написать такую функцию f(int n), которая считает факториал так:
f(n - 1) * n
PPS: не забываем, что 1! по определению 1 !!!


Задание 6. Построить треугольник Паскаля.

Спросить у пользователя число n.
Напечатать n строк треугольника Паскаля.
Первое и последнее число в строке - 1. Все остальные числа считаются как сумма двух чисел над ней, каждая следующая строка содержит на 1 число больше предыдущей:

1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
1 6 15 20 15 6 1
.... |
15 = 5 + 10


Задание 7. Знакомимся с массивом.

Создать массив из 10 элементов.
Ввести все 10 штук с клавиатуры.
Посчитать сумму всех элементов, напечатать ее.


Задание 8. Сортируем массив "пузырьком".

Создать массив из 10 элементов. Ввести их с клавиатуры.
Отсортировать массив по возрастанию методом "всплывающего пузырька":

0. Пусть длина массива k = 10.
1. берем 1-ый элемент (n = 1).
2. Если он больше следующего (с номером n+1), то меняем их местами.
3. Берем следующий (n = n+1).
4. Если n < k, то повторяем с пункта 2 до конца строки.
5. Если n = k (то есть если элемент с номером n - последний и следующий за ним не существует), то считаем, что самый большой элемент "всплыл" до верха и мы его больше не трогаем. Уменьшаем сортируемую часть массива: k = k - 1.
6. Если осталось сортировать элементов больше 1 (то есть, k > 1), то повторяем с пункта 1.
7. Все, готово!


Задание 9. Больше-меньше.

Написать игру - компьютер загадывает число от 1 до 20 (случайное). Наша задача - отгадать. На каждую попытку он отвечает больше ли число загадано, или меньше.


Задание 10. Больше-меньше наоборот.

Мы загадываем число (например, 7). Компьютер спрашивает самое маленькое, которое мы могли загадать (например, 0) и самое большое (например, 20).
Далее, он начинает гадать (по середине диапазона): 10, мы отвечаем - "меньше". Он берет диапазон от 0 до 10, спрашивает - "5". Мы говорим - "больше"... и т.д. пока не отгадает.

Если чисел не остается, то компьютер должен сказать, что мы мухлюем. :)


Запдание 11. Поиск решения уравнения с заданной точностью.

теория:
Пусть дано квадратное уравнение: x^2 - 3x - 10 = y
Очевидно, что:
при х = -3, y = 8 > 0
при х = 2, y = -12 < 0
значит где-то между ними должно такое х, при котором y = 0. Нам не очень важно где точно. Важно - найти интервал длиной не более заданного.
Возьмем точку прямо по середине между -3 и 2 (x =
(2 + (-3)) / 2 = 1/2) ) и смотрим:
при х = 0.5, y = -11.25 < 0, значит нужный нам х между -3 и 0.5 ... и т.д.

задача:
1. спросить точность решения (например, 0.0001).
2. методом деления отрезка пополам, найти интервал на котором знак в начале и в конце - разный. Длина интервала - не более заданной.
3. Напечатать, что решение лежит на промежутке от ... и до ...


Задание 12. Работа со строками, или "Ghbdtn!"

Пользователь вводит строку, забыв переключить раскладку на русский язык. Надо перекодировать эту строку и напечатать ее на русском языке.

Усложнение 1. То же самое сделать дюля английского языка и спросить с какой на какую раскладку перекодироватью.

Усложнение 2. Определить куда перекодировать автоматически.


Задание 13. Пишем простой архиватор.

Запрашиваем у пользователя строку. В строке могут содержаться повторяющиеся символы, например: аааббввагггг
Заменяем все символы на последовательность: символ+количество повторений. То есть для этой строки будет так: а3б2в2а1г4

Усложнение 1. Пишем декодировщик - на входе пользователь пишет закодированную строку, на выходе - печатаем раскодированную.

Усложнение 2. Спрашиваем кодировать или декодировать строку.

Усложнение 3. Сами определяем - является ли строка корректно закодированной или нет.


Задание 14. Простой калькулятор.

1. Спрашиваем у пользователя число.
2. Спрашиваем знак (+ - * : )
3. Спрашиваем второе число.
4. Кладем в первое результат действия. Печатаем его.
5. Повторяем с пункта 2, пока не ввели 0.


Задание 15. Калькулятор в строке.

Пользователь вводит строку вида:
5+3-20*4/2
Необходимо посчитать результат. Для начала, считаем, что приоритета знаков не существует.

Усложнение 1. Приоритет знако все же есть :)

Усложнение 2. В строке пользоваптель может случайно ввести пробелы.

Усложнение 3. В строке могут быть не целые числа...

Усложнение 4. В строке могут быть скобки (разумеется, в первую очередь считается результат в скобках). Глубина вложенности скобок может быть любой )


Задание 16. Крестики-нолики.

Игра работает в консоли. После старта на экране появляется размеченое поле:

1|2|3
-+-+-
4|5|6
-+-+-
7|8|9

И приглашение: "ходит 0"
Программа ждет ввода цифры от 1 до 9. После ввода, в соответствующую ячейку заносится цифра "0", поле перепечатывается и ход переходит второму игроку.

Игра продолжается, пока есть свободные клетки, или пока один из игроков не соберет вертикаль, горизонталь или диагональ из своих знаков.


Задание 17. Пики-фамы.

Компьютер загадывает 4-значное случайное число из разных цифр и предлагает его отгадать.
Пользователь вводит. В ответ компьютер выдает количество "пик" и "фам".

Пика - цифра, стоящая на своем месте.
Фама - цифра, в числе присутствующая, но стоящая не на своем месте.

Пользователю дается 6 попыток угадать число.


Задание 18. Двоичная система счисления.

Запрашиваем число в 10-ой системе, переводим его в двоичную систему, напечатать на экране.

Аналогично запрашиваем число в 2-ичной системе, переводим в десятичную.

Разумеется, результат работы первой программы, поданный на вход второй программы, должен выдавать исходные данные, поданные на вход первой программе изначально ;)


Задание 19. Перевод в любую систему из любой.

Программа запрашивает:
число,
в какой оно системе счисления,
в какую систему счисления перевести.

Как вариант - действуем через 10-ную. Переводим в десятичную, потом в заданную.

Литературу смотрим из предыдущего поста.


Задание 20. Калькулятор в произвольной системе.

Запросить у пользователя:
1. систему счисления
2. число X
3. число Y
Напечатать результат сложения чисел X и Y не переводя их в 10-ую систему.

пример работы в 5-ой системе:

432
+231
------
1213

Усложнение 1. Сделать то же для вычитания. Добавить запрос действия.

Усложнение 2. Сделать то же для умножения.

Усложнение 3. Сделать то же для деления... ;)


Задание 21. Простое число.

Написать программу для проверки является ли число, введенное с клавиатуры, простым.

Подсказка: проверять являются ли число простым достаточно до квадратного корня из числа. Например, проверяя является ли число 127 простым достаточно до 11 (√127 ≈ 11.269).

Усложнение: найти все простые числа от 2 до заданного числа и напечатать их в столбик.


Задание 22. Счастливые билеты.

Чем занимаются большинство жителей в городском транспорте? Развивают счет в уме! )
Задача: Подсчитать количество счастливых билетов среди билетов с шестизначными номерами.

Пояснение: Билет считается счастливым, если сумма цифр в первой половине равна сумме цифр второй половины. Например, нам попался билет номер 254763.
2+5+4 = 11
7+6+3 = 16

Билет не счастливый :(

Усложнение 1. Написать программу для любой четной длины числа.

Усложнение 2. Подсчитать самое маленькое и самое большое расстояние между счастливыми билетами.


Задание 23. Играем в РПГ )

Основа всех РПГ - сравнение характеристик, помноженных на некую вероятность (удачу).

Начнем с простого - пусть герой состоит из
*Имя,
*Жизни (0-100),
*Сила удара (1-10),
*Сила защиты (1-10),
*Удача (1-100).

Задача - написать программу, которая будет эмулировать бой (в консоли, конечно ;) ) двух героев. Один - игрок (пользователь). Второй - случайно сгенерированный моб.

В начале игры, пользователь вводит свое имя. Ему дается 100 HP, случайная удача, сила удара и защиты. Далее, генерируется случайный моб (имя - любое, HP - 100, остальное так же - случайно).

На экране появляется сообщение:
"__имя1__, Вы идете по лесу и встречаете монстра __имя2__ (характеристики). Вступить в бой или убежать?". Если пльзователь выбирает "убежать", то его удача уменьшается на 1 (если она вообще больше 1 ;) ). Если выбирается вступить в бой - начинается бой.

На экране появляется сообщение:
__имя1__ ударяет __имя2__: отнято столько-то HP.
__имя2__ ударяет __имя1__: отнято столько-то HP.
...
и так до тех пор, пока один не умрет. Если умер игрок - ему пишется что-то вроде "пИчалькО... (" и программа завершается. Если игрок побеждает, его HP восстанавливаются, а удача увеличивается на 1 (если она не больше 100).

Как посчитать количество отнятых очков:
Сила удара ударяющего*случайное(Удача ударяющего)/100 - Сила защиты защищающегося*случайное(Удача защищающегося)/100.
Если это выражение больше 0, то оно и есть количество отнятых HP, если меньше - удар отражен и ни чего не происходит.

Дерзаем!


Задание 24. Сыграем в очко? ;)

Надо было это задание делать 21ым ))

В колоде есть карты от 6 до туза четырех мастей. Стоимости карт:
Валет - 2 очка
Дама - 3 очка
Король - 4 очка
6 - 6 очков
7 - 7 очков
8 - 8 очков
9 - 9 очков
10 - 10 очков
Туз - 11 очков
Напоминаю, задача игрока - подобраться как можно ближе к 21 очку, но не превысить его.

1. В начале игры случайно дается 2 карты (случайно генерируются).
2. Далее - спрашивается хочет ли игрок добрать карты.
3. Если сумма очков больше 21 - игроку говорится, что он проиграл. Иначе - повторяем с пункта 2.

Усложнение 1. Сделать аналогично для компьютера. То есть сделать программу пытающуюся выиграть. Брать или не брать карту программа выбирает случайным образом в зависимости от того на сколько сумма карт на руках у компьютера близка к 21.

Усложнение 2. Сделать игру на двоих - человек против компьютера.

Усложнение 3. Человек против нескольких компьютеров ))


Задание 25. Камень-ножницы-бумага или "цу-е-фа".

Задание не сложное - написать программу игры в эту детскую забаву.
Для начала - диалог с компьютером.
Компьютер загадывает одно из трех - Камень, ножницы или бумага. Спрашивает человека что загадал он и определяет победителя (бумага обертывает камень, камень ломает ножницы, ножницы режут бумагу). Ну и ведется подсчет очков - после каждого кона печатается общий счет и запрашивается хочет ли пользователь играть дальше.

Усложнение 1: сделать игру на 2 компьютера. То есть пользователь только отвечает на вопрос играть ли дальше.

Усложнение 2: Сделать игру на нескольких (человек против 2 и более компьютеров). Если после "выкидывания" есть однозначный победитель - ему засчитывается очко, иначе - выкидываются однозначно проигравшие (если есть) и продолжается кон без них. "В конце останется только один" (С) Дункан МакЛауд...



Задача 26. Развилка дорог.
Каждый день я еду на работу по одному маршруту. В одном месте есть развилка,в конце - светофор. Расстояние от развилки до светофора одинаково, время у светофора в обоих направлениях равно.
Я еду по одной дороге. Возможно, я попаду под зеленый светофор. Меня это радует. Но если под красный - расстраивает. Если я 3 раза попадаю под красный, я обижаюсь и начинаю ездить другой дорогой. И там так же.

Вопрос: проезжаю ли я на зеленый свет в среднем чаще или реже, чем если бы всегда ехал одним путем?

